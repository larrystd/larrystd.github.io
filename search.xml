<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>块存储、对象存储和文件存储</title>
      <link href="/2024/12/31/%E5%9D%97%E5%AD%98%E5%82%A8%E3%80%81%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%92%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
      <url>/2024/12/31/%E5%9D%97%E5%AD%98%E5%82%A8%E3%80%81%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E5%92%8C%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</url>
      
        <content type="html"><![CDATA[<p>块存储、对象存储、文件存储是云计算云存储的概念，我想基于云存储，但也不限于云存储，谈谈自己的想法。</p><span id="more"></span><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>首先给出chatgpt对块、对象、文件存储的定义</p><p>块存储（Block Storage），是一种高性能存储技术，主要用于对结构化或非结构化数据进行低延迟、高效存储。它将数据划分为固定大小的“块”，每个块都有唯一的地址，独立存储于存储介质上。这种存储方式广泛用于云计算、数据库和虚拟化等场景。</p><p>文件存储（File Storage），是一种常见的数据存储方式，使用文件和文件夹的层次化结构来组织和管理数据。它类似于操作系统中的文件系统，提供直观的路径访问和共享功能，适用于多个客户端访问共享数据的场景。</p><p>对象存储是一种现代化的存储架构，专为存储大量非结构化数据而设计。它将数据存储为对象，并通过唯一的标识符（Object ID）进行访问，而不是使用传统的文件系统层次结构。对象存储以高可扩展性、弹性和低成本著称，是云计算和大规模数据存储的核心技术之一。</p><p>下面从我的角度给出以上名词定义的解释版本</p><h3 id="块存储"><a href="#块存储" class="headerlink" title="块存储"></a>块存储</h3><p>块存储功能上等价于一个块设备，linux 上可以使用lsblk 查看设备。在没有虚拟化情况下，一个块设备就是一块物理意义的硬盘。linux用sda，sdb, sdc表示块设备，块设备可以分区，例如sda1, sda2, sda3就是sda设备上的三个分区。linux 常用的分区工具是fdisk，每个块设备分区可以单独格式化文件系统（类似windows C, D等区）。</p><p>块存储的访问是在文件系统层下的，linux用户io会先走内核文件系统层，文件系统会维护（文件id，offset, length）到块设备的（设备号，块号）的映射，这种映射也可以理解成一种虚拟地址到物理地址的映射。一旦得到设备号和块号，对于本地存储，操作系统会调用驱动程序读写磁盘，并利用中断实现数据读写完毕后通知cpu处理。对于云存储，操作系统会携带（设备号，块号）发送网络包，同样注册中断实现网络包返回时通知cpu处理。一般而言，TCP协议网络包可以满足要求，如果追求高性能，就要涉及到用户态tcp协议，dpdk工具链，virtio协议规范，rdma高性能网络了。</p><p>根据块存储定义“它将数据划分为固定大小的“块”，每个块都有唯一的地址，独立存储于存储介质上”，可以得到<strong>块对齐</strong>的特点</p><ol><li>块存储的单位是“块”，<strong>块是固定大小的（通常为4KB）</strong>。相较之下，文件存储的单位“文件”（File），对象存储的单位“对象”（object），是任意大小的。</li><li>由于”块”是固定大小，例如4K，那<strong>读写iosize可以设计成4K对齐</strong>。这可以大大减小存储涉及的复杂性。如果读写大小是任意的，用户可以写<code>[1023, 1025]</code>, <code>[1022, 1026]</code>等任意区间，新区间数据还应该覆盖旧区间数据。可以想到，随着不断写入，区间数量线性增长，不仅占用大量内存，读操作还由于遍历所有区间导致性能下降。块存储的读写iosize设计成4K对齐的，用户只能4K对齐写，区间管理和读性能大大降低。</li></ol><p>写区间管理是存储的重要模块，称为layout管理，可以分析得到，<br>写区间越多-&gt;内存占用越多-&gt;读性能下降，写性能不受影响</p><p>除了固定大小和iosize外，块存储的另一个重要特点是，<strong>一个块每时每刻只会被一个ip主机访问，一个云硬盘每时每刻也只会被一个ip主机访问</strong>，这很关键，这意味着，如果我们把云硬盘划分成固定大小的segment（segment可以很大，例如16GB、32GB，因为云硬盘大小很大）。我们可以把相同云硬盘的多个segment调度到多机上，而不用考虑对多机加分布式锁，甚至不用加锁! 我们可以想象块存储架构的一般实现形式，只关心segment的调度和segment中的(devid, blockid)到实际物理存储的映射，每个server记录了某个segment (devid, blockid)到实际物理存储映射（索引表），根据索引表处理读写请求，而master记录了segment和server的调度计划，如果底层采用的是类似hdfs的分布式文件系统，只需要把<strong>索引表全量复制到其他server</strong>，就可以实现segment的调度。</p><p>如果允许多个ip同时访问一块云硬盘，可以想到，为了保证数据一致性，需要保证某ip请求写数据时，其他ip无法写数据，也就是加写锁。但如果一个segment永远只有一个ip读写数据，我们只需要保证io处理顺序和客户端发出的请求顺序一致，不需要加写锁！单ip访问的特点也让块存储优化读写路径变得容易，因为不需要考虑多客户端缓存&#x2F;数据一致性。</p><p>单ip访问导致块存储的缺点是，块存储不能多机共享。这是块存储的应用上的最大劣势。</p><p>总结块存储的三大特点</p><ol><li>功能等价硬盘</li><li>块和读写iosize 4K对齐，layout管理容易</li><li>每个块设备每时每刻只有一个ip访问</li></ol><h3 id="文件存储"><a href="#文件存储" class="headerlink" title="文件存储"></a>文件存储</h3><p>块存储相当于硬盘块设备，文件系统相当于ext4等文件系统。块存储访问的路径是，用户程序-&gt;虚拟文件系统-&gt;ext4等单机文件系统-&gt;网络层（TCP-&gt;IP-&gt;网卡）-&gt;后端；文件系统则是，用户程序-&gt;虚拟文件系统-&gt;网络层（TCP-&gt;IP-&gt;网卡）-&gt;后端。文件系统的网络层同样可以利用块存储介绍的用户态tcp协议，dpdk工具链，virtio协议规范，rdma高性能网络了来优化。</p><p>块存储遵循的网络协议常见的是iSCSI和NVMe-oF，前者更通用后者更追求性能。文件存储的网络协议Linux是NFS协议，Windows是SMB协议。其中，Linux 内核除了提供NFS模块之外，还提供fuse接口支持用户态自定义文件系统。</p><p>相比块存储协议主要是块读写，文件存储的协议更复杂。除读写外，还有rename（移动），readdir（读目录文件），link（软硬链接），文件锁等。文件协议的全部特性实现复杂，很多选择基于fuse自定义文件存储协议。</p><p>文件系统用N叉树来组织结构，或者说二元组（父目录handle，子文件name）。子文件和父目录常常相互影响，例如创建子目录后父目录link数量需要+1，子文件删除需要父目录加锁等</p><p>除了复杂的文件存储协议，文件存储另一个挑战是多客户端共享。和块存储不同，文件存储支持多客户端同时访问一个文件系统。这给文件存储实现带来很大困难</p><ol><li>文件系统元数据难以拆分。如果一个文件系统拆分成两部分，每部分位于一个节点。那么从机器A rename文件到机器B就要加分布式锁，保证只有一个请求执行rename，否则会导致死锁。分布式锁性能代价很大。事实上rename 的死锁问题在单机文件系统也存在，linux通过保证rename操作全局唯一来避免死锁，可以参考这个文章， <a href="http://www.linuxeden.com/html/sysadmin/20090903/67802.html">Linux文件系统中元数据的加锁机制与组织方式</a>。元数据不拆分会导致元数据iops受限于单机iops，一个文件系统只能位于某个节点，那该文件系统的元数据iops受制于单节点的iops（数据可以拆分到多个节点，因此读写iops和吞吐可以水平扩展）</li><li>readdir和remove 等语义实现困难，某客户端正在readdir，另一个客户端把目录或目录下的文件remove掉。可以对readdir的目录加读锁，删目录需要申请写锁；此外由于readdir 会分批返回，因此应该对readdir 的cookie文件进行软删除，使readdir 下次请求还可以在cookie文件处继续readdir，不受cookie文件删除影响。</li><li>复杂的元数据缓存。元数据缓存至少有inode缓存，缓存inode 的size, mode, link数量, atime&#x2F;ctime&#x2F;mtime等信息，加快getattr速度；dentry缓存，缓存目录项下的文件名，提高readdir速度。带来的问题就是, lookup，create,remove,rename会写dentry缓存（缓存穿透，会读后端，结果更新缓存），写期间需要对dentry加写锁，导致缓存无法被读写（相当于缓存失效），即dentry的所有请求都需要阻塞直到缓存更新好，会拖累元数据性能。方案是考虑多shot并发写后端元数据，读操作使用多版本，在写成功之前，只能读到写成功的数据。</li><li>客户端缓存一致性困难。客户端天然pagecache缓存是write-back缓存策略，多客户端同时写文件会不可避免的导致某客户端写入的数据无法被其他客户端感知的。处理方案，1.close-and-open一致性，即close文件会把数据刷到后端，从而被其他客户端看到 2. 定期刷到后端，nfsv3使用该策略，会牺牲一部分一致性 3. 使用文件锁，保证某文件同时刻只有一个客户端执行写操作，即保证1写多读。但文件锁的实现难点是服务端failover。nfsv3协议是无状态的，好处是服务端&#x2F;客户端崩溃后重新连接不用恢复状态；客户端文件锁实现要求协议具有状态，问题就是崩溃后需要状态恢复。</li></ol><p>块存储的块大小和iosize 4K对齐，对块存储的io区间管理（称为layout管理）降低了难度。不幸的是，文件存储对这俩都没要求，文件大小不固定，iosize也不固定。为了降低layout管理的复杂度，可以通过fuse自定义客户端让客户端发往后端的iosize尽量对齐。</p><p>文件存储的实现充满了折衷，例如元数据拆分能提高getattr，readdir等元数据操作的性能，但牺牲了rename的延迟和iops。客户端文件锁的实现提高了一致性和状态管理，但牺牲了客户端的多写能力。相对容易的文件存储实现架构是后端分为协议层、元数据层和数据层。协议层负责解析协议，转发，鉴权; 元数据层管理inode, dentry和hardlink表和元数据操作，数据层管理文件layout和读写；数据拆分，元数据不拆分；fuse实现自定义的客户端取代nfs。</p><p>总结文件存储的特点</p><ol><li>功能等价文件系统</li><li>块和读写iosize 不要求对齐，layout管理困难</li><li>支持多ip共享访问</li><li>协议复杂，实现多样。主要的调用有lookup, getattr, setaddr, access, read, write, link, symlink, readlink, readdir, readdirplus, remove，rename, fsstat等</li></ol><h3 id="对象存储"><a href="#对象存储" class="headerlink" title="对象存储"></a>对象存储</h3><p>对象存储是文件存储简化而来的，由于文件存储实现复杂，处处需要折衷，难以元数据拆分（水平扩展），无法提供稳定的高性能。</p><ol><li>文件存储元数据难以拆分的原因是其利用（目录，文件）构建的目录树结构，对象存储取消目录概念，文件全部通过对象路径hash查找。因此对象存储的元数据就是一个简单的hash表，hash表是容易多机拆分的。只需要1. 将对象路径hash到节点ip 2. 将对象路径hash到key。因此，对象存储bucket的元数据能力远超文件存储。前者元数据iops能达到几十万上百万，后者只有几万。</li><li>对象存储没有了目录概念，自然也没有了rename，link，目录锁概念。而rename，link是文件存储最难实现的调用之一。</li><li>对象存储只有object元数据缓存，没有dentry缓存，缺点就是对象存储的listobject 性能一般</li><li>对象存储的块大小定长且很大（高达1M），对象存储原生不支持对象的随机写和追加写，没有文件存储客户端锁保证一写多读和layout管理困难的问题。</li></ol><p>对象存储在读io上类似文件存储，支持对象随机读，只需要把路径&#x2F; 解析为目录；对象存储不支持写操作。如果要对象存储和文件存储结合使用，可以 1. 写io 写文件存储，文件存储后台tiering到对象存储 2. 读io 先读文件存储，文件存储不存在再读对象存储。</p><p>对象存储协议s3协议是一种http协议，也就是说对象存储支持浏览器互联网的访问，对象存储的服务环境更复杂，这让对象存储在鉴权、安全等方面建设比文件存储&#x2F;块存储更完善，后两者一般在高可信、高速网络中使用rpc调用。</p><p>总结对象存储的特点</p><ol><li>文件系统的简化版，无目录概念，支持海量客户端访问</li><li>s3协议是一种http协议，服务更广泛（块&#x2F;对象的主要服务对象是ecs&#x2F;gpu等计算单元）</li><li>支持随机读但不支持写，几乎不需要layout管理。元数据能力容易扩展。</li></ol><h3 id="layout管理"><a href="#layout管理" class="headerlink" title="layout管理"></a>layout管理</h3><ul><li>写操作</li></ul><p>块存储的layout，（设备号、块）-&gt;后台（文件id, offset），offset和length是4K对齐的</p><p>文件存储的layout，用户（文件inode, offset）-&gt; 后台（文件id, offset），offset和length可以不对齐</p><p>对象存储的layout，用户（objectid）-&gt;后台（文件id, offset）</p><ul><li>读操作</li></ul><p>块存储的layout，（设备号、块）-&gt;后台（文件id, offset, length），offset和length是4K对齐的，后台文件offset是最新的写入</p><p>文件存储的layout，用户（文件inode, offset, length）-&gt; 后台（文件id, offset, length），offset和length可以不对齐，offset是最新的写入</p><p>对象存储的layout，用户（objectid）-&gt;后台（文件id, offset）。直接记录object在后台文件存放的起始位置，即可随机读。对象存储没有覆盖写</p><p>块存储和文件存储由于支持随机覆盖写，读操作需要保证始终读到最新写入的offset，对象存储不支持随机写，读操作只需要找到object的起始位置即可。</p><h3 id="索引表的分裂和调度"><a href="#索引表的分裂和调度" class="headerlink" title="索引表的分裂和调度"></a>索引表的分裂和调度</h3><p>块存储&#x2F;文件存储的layout表，文件存储的元数据inode&#x2F;dentry表都要记录到KV存储中。KV存储的基本能力是，</p><ol><li>如果KV体积庞大，能分裂成两个KV；</li><li>KV可以调度到任何机器中</li></ol><p>如果KV的key是有序的，KV的分裂可以按照key来拆分，小于某key的为KV1，大于的为KV2。KV分裂依赖于复制，</p><ol><li>全量复制。对旧KV复制出两个新KV，复制过程没有发生数据的复制，只是数据的引用。KV内存态的信息记录在redolog，磁盘态的信息记录在SST文件。新的KV1，2 replay redolog生成内存态KV，根据区间引用SST获得磁盘态信息。全量复制应当是复制到某个checkpoint。</li><li>增量复制。增量复制的进度单位应该是inode，设备等物理概念，当一个inode全量复制完毕，后续该inode写操作即可在新KV上进行。逐渐过渡到全部inode，设备复制完毕，把旧KV清理掉。</li></ol><p>KV的调度也依赖于复制</p><ol><li>将旧KV在新节点上复制一份。同样是先全量复制，后增量复制。</li></ol>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统总览</title>
      <link href="/2024/12/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E8%A7%88/"/>
      <url>/2024/12/31/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> single-machine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>单机存储引擎</title>
      <link href="/2024/12/31/%E5%8D%95%E6%9C%BA%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8EB+%E6%A0%91%E5%92%8CLSM%E6%A0%91/"/>
      <url>/2024/12/31/%E5%8D%95%E6%9C%BA%E5%AD%98%E5%82%A8%E5%BC%95%E6%93%8EB+%E6%A0%91%E5%92%8CLSM%E6%A0%91/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> single-machine </tag>
            
            <tag> storage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>博客搭建之旅</title>
      <link href="/2024/12/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E6%97%85/"/>
      <url>/2024/12/31/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E4%B9%8B%E6%97%85/</url>
      
        <content type="html"><![CDATA[<p>使用hexo 搭建博客</p><span id="more"></span><h3 id="hexo-博客搭建"><a href="#hexo-博客搭建" class="headerlink" title="hexo 博客搭建"></a>hexo 博客搭建</h3><h4 id="step1，准备node-npm环境"><a href="#step1，准备node-npm环境" class="headerlink" title="step1，准备node, npm环境"></a>step1，准备node, npm环境</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.2/install.sh | bash</span><br><span class="line">nvm install node</span><br><span class="line"></span><br><span class="line">node -v</span><br><span class="line">npm install npm -g  </span><br></pre></td></tr></table></figure><h4 id="step2，安装和部署hexo"><a href="#step2，安装和部署hexo" class="headerlink" title="step2，安装和部署hexo"></a>step2，安装和部署hexo</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装hexo</span></span><br><span class="line">npm install -g hexo-cli</span><br><span class="line">npm install -g hexo</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">部署hexo</span></span><br><span class="line">hexo init tech-blog</span><br><span class="line">cd tech-blog</span><br><span class="line">npm install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">下载主题到themes目录，这里选择maupassant主题</span></span><br><span class="line">git clone https://github.com/tufu9441/maupassant-hexo.git themes/maupassant</span><br><span class="line">npm install hexo-renderer-pug --save</span><br><span class="line">npm install hexo-renderer-sass-next --save</span><br></pre></td></tr></table></figure><p>运行博客，本地执行如下命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo s</span><br></pre></td></tr></table></figure><h4 id="3-配置github-pages"><a href="#3-配置github-pages" class="headerlink" title="3. 配置github pages"></a>3. 配置github pages</h4><p>在github创建{username}.github.io仓库，例如我的github用户名为larrystd，仓库名就是larrystd.github.io。仓库需要设置成public</p><p>在.&#x2F;_config.yml文件增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@github.com:larrystd/larrystd.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>之后执行hexo g &amp;&amp; hexo d，可自动将打包后的静态文件上传到github的仓库</p><p>在larrystd.github.io仓库点击Settings-Pages，Build and deployment-source选择Deploy from branch，branch选择master &#x2F;(root)</p><h4 id="4-配置本地搜索"><a href="#4-配置本地搜索" class="headerlink" title="4. 配置本地搜索"></a>4. 配置本地搜索</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./themes/manupassant/_config.yml增加</span></span><br><span class="line">self_search: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行执行</span></span><br><span class="line">npm install hexo-generator-search --save</span><br></pre></td></tr></table></figure><h4 id="5-配置字数统计"><a href="#5-配置字数统计" class="headerlink" title="5. 配置字数统计"></a>5. 配置字数统计</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">./themes/manupassant/_config.yml增加</span></span><br><span class="line">wordcount: true</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令行执行</span></span><br><span class="line">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure><h4 id="6-配置gitalk评论插件"><a href="#6-配置gitalk评论插件" class="headerlink" title="6. 配置gitalk评论插件"></a>6. 配置gitalk评论插件</h4><p>点击<a href="https://github.com/settings/applications/new%EF%BC%8C%E7%94%B3%E8%AF%B7OAuth">https://github.com/settings/applications/new，申请OAuth</a> application。Homepage URL和Authorization callback URL均填写{username}.github.io</p><p>复制Client ID和Client secrets</p><p>github再创一个repo，例如blog</p><p>.&#x2F;themes&#x2F;manupassant&#x2F;_config.yml增加</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">gitalk: ## See: https://github.com/gitalk/gitalk</span><br><span class="line">  enable: true ## If you want to use Gitment comment system please set the value to true.</span><br><span class="line">  owner: $&#123;username&#125; ## Your GitHub ID, e.g. username</span><br><span class="line">  repo: blog ## The repository to store your comments, make sure you&#x27;re the repo&#x27;s owner, e.g. gitalk.github.io</span><br><span class="line">  client_id: xxx ## GitHub client ID, e.g. 75752dafe7907a897619</span><br><span class="line">  client_secret: xxx ## GitHub client secret, e.g. ec2fb9054972c891289640354993b662f4cccc50</span><br><span class="line">  admin: $&#123;username&#125; ## Github repo owner and collaborators, only these guys can initialize github issues.</span><br></pre></td></tr></table></figure><p>最终的</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> application </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>缓存</title>
      <link href="/2024/12/31/%E7%BC%93%E5%AD%98%E6%80%BB%E8%A7%88/"/>
      <url>/2024/12/31/%E7%BC%93%E5%AD%98%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>信号处理时间</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> multi-machine </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>并发</title>
      <link href="/2024/12/31/%E5%B9%B6%E5%8F%91%E6%80%BB%E8%A7%88/"/>
      <url>/2024/12/31/%E5%B9%B6%E5%8F%91%E6%80%BB%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>协程</p>]]></content>
      
      
      <categories>
          
          <category> tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> library </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/12/31/hello-world/"/>
      <url>/2024/12/31/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> hello </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hello </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
